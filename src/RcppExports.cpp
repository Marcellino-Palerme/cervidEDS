// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// border_effect
NumericVector border_effect(unsigned int ui_width, unsigned int ui_heigth, double d_sigma, double d_pos_x, double d_pos_y);
RcppExport SEXP _cervideDS_border_effect(SEXP ui_widthSEXP, SEXP ui_heigthSEXP, SEXP d_sigmaSEXP, SEXP d_pos_xSEXP, SEXP d_pos_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type ui_width(ui_widthSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ui_heigth(ui_heigthSEXP);
    Rcpp::traits::input_parameter< double >::type d_sigma(d_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type d_pos_x(d_pos_xSEXP);
    Rcpp::traits::input_parameter< double >::type d_pos_y(d_pos_ySEXP);
    rcpp_result_gen = Rcpp::wrap(border_effect(ui_width, ui_heigth, d_sigma, d_pos_x, d_pos_y));
    return rcpp_result_gen;
END_RCPP
}
// distance2point
NumericVector distance2point(double x, double y, double x1, double y1);
RcppExport SEXP _cervideDS_distance2point(SEXP xSEXP, SEXP ySEXP, SEXP x1SEXP, SEXP y1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    rcpp_result_gen = Rcpp::wrap(distance2point(x, y, x1, y1));
    return rcpp_result_gen;
END_RCPP
}
// shorter_distance
NumericVector shorter_distance(double x, double y, double x1, double y1, double x2, double y2);
RcppExport SEXP _cervideDS_shorter_distance(SEXP xSEXP, SEXP ySEXP, SEXP x1SEXP, SEXP y1SEXP, SEXP x2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(shorter_distance(x, y, x1, y1, x2, y2));
    return rcpp_result_gen;
END_RCPP
}
// distance2segment
NumericVector distance2segment(double x, double y, double x1, double y1, double x2, double y2);
RcppExport SEXP _cervideDS_distance2segment(SEXP xSEXP, SEXP ySEXP, SEXP x1SEXP, SEXP y1SEXP, SEXP x2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(distance2segment(x, y, x1, y1, x2, y2));
    return rcpp_result_gen;
END_RCPP
}
// potential_func
double potential_func(double alpha_t, double beta, double dist, double power);
RcppExport SEXP _cervideDS_potential_func(SEXP alpha_tSEXP, SEXP betaSEXP, SEXP distSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha_t(alpha_tSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(potential_func(alpha_t, beta, dist, power));
    return rcpp_result_gen;
END_RCPP
}
// grad_potential_func
double grad_potential_func(double alpha_t, double beta, double dist, double power, double deriv);
RcppExport SEXP _cervideDS_grad_potential_func(SEXP alpha_tSEXP, SEXP betaSEXP, SEXP distSEXP, SEXP powerSEXP, SEXP derivSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha_t(alpha_tSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< double >::type deriv(derivSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_potential_func(alpha_t, beta, dist, power, deriv));
    return rcpp_result_gen;
END_RCPP
}
// alpha_func
double alpha_func(double alpha1, double alpha2, double alpha3, double t);
RcppExport SEXP _cervideDS_alpha_func(SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP alpha3SEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha3(alpha3SEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(alpha_func(alpha1, alpha2, alpha3, t));
    return rcpp_result_gen;
END_RCPP
}
// bound
double bound(double val, double bound_1, double bound_2);
RcppExport SEXP _cervideDS_bound(SEXP valSEXP, SEXP bound_1SEXP, SEXP bound_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    Rcpp::traits::input_parameter< double >::type bound_1(bound_1SEXP);
    Rcpp::traits::input_parameter< double >::type bound_2(bound_2SEXP);
    rcpp_result_gen = Rcpp::wrap(bound(val, bound_1, bound_2));
    return rcpp_result_gen;
END_RCPP
}
// potential_value
double potential_value(NumericMatrix nm_dist_element, NumericMatrix nm_info_type);
RcppExport SEXP _cervideDS_potential_value(SEXP nm_dist_elementSEXP, SEXP nm_info_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nm_dist_element(nm_dist_elementSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nm_info_type(nm_info_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(potential_value(nm_dist_element, nm_info_type));
    return rcpp_result_gen;
END_RCPP
}
// potential_effect
NumericVector potential_effect(NumericMatrix nm_dist_element, NumericMatrix nm_info_type);
RcppExport SEXP _cervideDS_potential_effect(SEXP nm_dist_elementSEXP, SEXP nm_info_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nm_dist_element(nm_dist_elementSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nm_info_type(nm_info_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(potential_effect(nm_dist_element, nm_info_type));
    return rcpp_result_gen;
END_RCPP
}
// all_effect
NumericVector all_effect(NumericVector nv_coords_point, unsigned int ui_width, unsigned int ui_heigth, double d_sigma, NumericMatrix nm_dist_element, NumericMatrix nm_info_type, double time_step);
RcppExport SEXP _cervideDS_all_effect(SEXP nv_coords_pointSEXP, SEXP ui_widthSEXP, SEXP ui_heigthSEXP, SEXP d_sigmaSEXP, SEXP nm_dist_elementSEXP, SEXP nm_info_typeSEXP, SEXP time_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nv_coords_point(nv_coords_pointSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ui_width(ui_widthSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ui_heigth(ui_heigthSEXP);
    Rcpp::traits::input_parameter< double >::type d_sigma(d_sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nm_dist_element(nm_dist_elementSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nm_info_type(nm_info_typeSEXP);
    Rcpp::traits::input_parameter< double >::type time_step(time_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(all_effect(nv_coords_point, ui_width, ui_heigth, d_sigma, nm_dist_element, nm_info_type, time_step));
    return rcpp_result_gen;
END_RCPP
}
// diffusion
double diffusion(double d_sigma, double time_step);
RcppExport SEXP _cervideDS_diffusion(SEXP d_sigmaSEXP, SEXP time_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d_sigma(d_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type time_step(time_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(diffusion(d_sigma, time_step));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cervideDS_border_effect", (DL_FUNC) &_cervideDS_border_effect, 5},
    {"_cervideDS_distance2point", (DL_FUNC) &_cervideDS_distance2point, 4},
    {"_cervideDS_shorter_distance", (DL_FUNC) &_cervideDS_shorter_distance, 6},
    {"_cervideDS_distance2segment", (DL_FUNC) &_cervideDS_distance2segment, 6},
    {"_cervideDS_potential_func", (DL_FUNC) &_cervideDS_potential_func, 4},
    {"_cervideDS_grad_potential_func", (DL_FUNC) &_cervideDS_grad_potential_func, 5},
    {"_cervideDS_alpha_func", (DL_FUNC) &_cervideDS_alpha_func, 4},
    {"_cervideDS_bound", (DL_FUNC) &_cervideDS_bound, 3},
    {"_cervideDS_potential_value", (DL_FUNC) &_cervideDS_potential_value, 2},
    {"_cervideDS_potential_effect", (DL_FUNC) &_cervideDS_potential_effect, 2},
    {"_cervideDS_all_effect", (DL_FUNC) &_cervideDS_all_effect, 7},
    {"_cervideDS_diffusion", (DL_FUNC) &_cervideDS_diffusion, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cervideDS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
